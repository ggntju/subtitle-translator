WEBVTT

1
00:00:00.600 --> 00:00:06.510
In this video you'll learn how to mix Java
and Kotlin code in terms of nullability.

2
00:00:06.510 --> 00:00:10.797
Java types are not divided into
nullable and non-nullable types,

3
00:00:10.797 --> 00:00:14.342
so what happens when you call
Java methods from Kotlin?

4
00:00:14.342 --> 00:00:18.783
Kotlin nullable types under the hood
are implemented using annotations.

5
00:00:18.783 --> 00:00:22.547
If you use the same annotations
to annotate your Java code,

6
00:00:22.547 --> 00:00:26.914
then annotated Java types will be
visible from Kotlin as nullable and

7
00:00:26.914 --> 00:00:29.716
non-nullable Kotlin types accordingly.

8
00:00:29.716 --> 00:00:35.288
An interesting question is, what happens
if you use unannotated Java types?

9
00:00:35.288 --> 00:00:40.398
These are probably the majority of
Java types, let's discuss that.

10
00:00:40.398 --> 00:00:44.864
Such unannotated Java type
will be visible from Kotlin

11
00:00:44.864 --> 00:00:49.243
as a regular Java type and
it will behave like in Java.

12
00:00:49.243 --> 00:00:53.347
It even has a special name,
it's called a platform type.

13
00:00:53.347 --> 00:00:57.170
It's neither nullable nor
a non-nullable type.

14
00:00:57.170 --> 00:01:02.210
You can sometimes see the annotation
type followed by the exclamation mark.

15
00:01:02.210 --> 00:01:04.240
It's annotation, not syntax.

16
00:01:04.240 --> 00:01:08.440
That means you can't declare a variable
of such type in the Kotlin language.

17
00:01:08.440 --> 00:01:12.350
You can only sometimes find
these type in error messages.

18
00:01:12.350 --> 00:01:16.981
If you see it, that means that
this type came from Java and

19
00:01:16.981 --> 00:01:20.466
it is so-called of unknown nullability.

20
00:01:20.466 --> 00:01:22.515
A little bit of history first.

21
00:01:22.515 --> 00:01:25.494
The safest approach when you mix Java and

22
00:01:25.494 --> 00:01:30.145
Kotlin is to interpret each Java
type as nullable Kotlin type.

23
00:01:30.145 --> 00:01:34.475
In this case, you are free from
NullPointerExceptions because you have to

24
00:01:34.475 --> 00:01:37.470
always check for the types explicitly.

25
00:01:37.470 --> 00:01:43.165
And in Kotlin, this approach was tried
at first, but it didn't work out well.

26
00:01:43.165 --> 00:01:47.630
Kotlin wanted it first to interpret
each Java type as nullable type.

27
00:01:47.630 --> 00:01:52.710
But then the early adopters said that
the code was full of exclamation marks and

28
00:01:52.710 --> 00:01:55.690
it wasn't really readable
is the first problem.

29
00:01:55.690 --> 00:01:58.862
The second problem,
which is more important,

30
00:01:58.862 --> 00:02:02.998
is that such an approach doesn't
really work with generics.

31
00:02:02.998 --> 00:02:07.838
It wasn't a solution, so instead
Kotlin uses the idea of platform type,

32
00:02:07.838 --> 00:02:10.813
which refers to the type
that came from Java.

33
00:02:13.149 --> 00:02:17.383
When you see a platform type in
an error message like in this example,

34
00:02:17.383 --> 00:02:19.876
most probably you can safely ignore it.

35
00:02:19.876 --> 00:02:24.715
The fact that you see the exclamation
mark is not connected with the source of

36
00:02:24.715 --> 00:02:26.200
the problem.

37
00:02:26.200 --> 00:02:28.739
Here we try to assign String to Boolean.

38
00:02:28.739 --> 00:02:31.801
The problems lies in incompatible types,
but

39
00:02:31.801 --> 00:02:35.656
is not connected with the fact
that it's a platform type.

40
00:02:35.656 --> 00:02:40.056
Exclamation mark means that the type
came from Java, but you need to look for

41
00:02:40.056 --> 00:02:43.790
a different source of the problem
if you see it in error message.

42
00:02:45.500 --> 00:02:47.034
There is a question to you,

43
00:02:47.034 --> 00:02:51.370
you know that the platform type
behaves like a regular Java type.

44
00:02:51.370 --> 00:02:54.170
What do you think would
happen in this example?

45
00:02:54.170 --> 00:02:56.920
With the reference
available of platform type,

46
00:02:56.920 --> 00:02:59.880
which stores now that came from Java.

47
00:02:59.880 --> 00:03:01.540
We have several options.

48
00:03:01.540 --> 00:03:05.447
NullPointerException is thrown,
null is printed,

49
00:03:05.447 --> 00:03:09.890
compilation error, or
IllegalStateException is thrown.

50
00:03:09.890 --> 00:03:13.090
The right answer here is
NullPointerException.

51
00:03:13.090 --> 00:03:16.004
This code behaves like regular Java.

52
00:03:16.004 --> 00:03:20.714
That means that when we try to reference
the variable of the platform type,

53
00:03:20.714 --> 00:03:22.747
we get NullPointerException.

54
00:03:22.747 --> 00:03:26.969
Kotlin compiler infers the type
of session description as String

55
00:03:26.969 --> 00:03:30.585
platform type since this type
is not annotated in Java.

56
00:03:30.585 --> 00:03:35.567
Kotlin allows you to dereference it,
so you can use it as in Java.

57
00:03:35.567 --> 00:03:40.610
It's a known nullability, so
it can probably work fine.

58
00:03:40.610 --> 00:03:44.090
However, you can also get
a NullPointerException like in Java.

59
00:03:45.510 --> 00:03:47.150
If you use the safe access here,

60
00:03:47.150 --> 00:03:49.940
then everything is fine,
you have null as a result.

61
00:03:51.890 --> 00:03:54.299
Now you know that if you mix Kotlin and
Java,

62
00:03:54.299 --> 00:03:56.854
you'll still have NullPointerExceptions.

63
00:03:56.854 --> 00:04:01.038
It seems that Kotlin doesn't
save you from NPEs in this case.

64
00:04:01.038 --> 00:04:06.690
For convenience, we have to sacrifice
the 100 percentage null safety.

65
00:04:06.690 --> 00:04:10.896
The question than is whether it's still
possible to prevent NullPointerExceptions,

66
00:04:10.896 --> 00:04:11.760
what can be done?

67
00:04:12.790 --> 00:04:15.580
There are still some things
that you can do to achieve

68
00:04:15.580 --> 00:04:17.800
a better level of null safety.

69
00:04:17.800 --> 00:04:20.220
There are two main pieces of advice.

70
00:04:20.220 --> 00:04:23.600
At first,
you can annotate your Java types.

71
00:04:23.600 --> 00:04:28.758
If that's not an option, it's useful just
to specify explicitly types of variables,

72
00:04:28.758 --> 00:04:31.070
which get values from Java functions.

73
00:04:31.070 --> 00:04:34.281
Now let's consider these two
pieces of advice in turn.

74
00:04:34.281 --> 00:04:37.648
First, let's talk about
annotating Java types.

75
00:04:39.135 --> 00:04:43.029
Annotating Java types is easy,
simply add @Nullable and

76
00:04:43.029 --> 00:04:45.652
@NotNull annotations to Java code and

77
00:04:45.652 --> 00:04:50.909
Kotlin will interpret annotated types
as nullable and non-nullable types.

78
00:04:50.909 --> 00:04:54.624
You can annotate a function return tab,
parameter types, and

79
00:04:54.624 --> 00:04:57.438
Kotlin will interpret
the types accordingly.

80
00:04:59.092 --> 00:05:01.400
Different annotations are supported.

81
00:05:01.400 --> 00:05:05.230
Many frameworks define their
own nullability annotations.

82
00:05:05.230 --> 00:05:07.560
Kotlin tries to support all of them.

83
00:05:07.560 --> 00:05:12.279
These annotations have different names,
but they all mean the same.

84
00:05:12.279 --> 00:05:18.280
The question, what happens with the code
after we add nullable notation?

85
00:05:18.280 --> 00:05:20.280
We have all the same possible options.

86
00:05:21.570 --> 00:05:23.570
Here we get a compilation error.

87
00:05:24.760 --> 00:05:30.960
Now Kotlin sees their description function
as the function returning nullable String.

88
00:05:30.960 --> 00:05:36.170
Then it infers the type of the description
variable as nullable String.

89
00:05:36.170 --> 00:05:40.230
That produces an error that you
can't dereference a nullable String.

90
00:05:41.380 --> 00:05:46.096
Now Kotlin forces you to use
either safe access arbitrator or

91
00:05:46.096 --> 00:05:49.343
another way to cope with nullable types.

92
00:05:49.343 --> 00:05:52.893
Annotating Java types really helps,
however,

93
00:05:52.893 --> 00:05:58.705
you can ask whether you really need to
annotate all Java types in your code base.

94
00:05:58.705 --> 00:06:03.876
And the answer is, if you have an option
that might be used by default,

95
00:06:03.876 --> 00:06:06.519
you can specify only the other one.

96
00:06:06.519 --> 00:06:10.533
For instance,
you can annotate only @Nullable types,

97
00:06:10.533 --> 00:06:13.888
if you pick @NotNull by default or
vice versa.

98
00:06:13.888 --> 00:06:16.839
It's supported by a JSR-305.

99
00:06:16.839 --> 00:06:20.500
You need to introduce your own
annotation that specifies the default.

100
00:06:21.540 --> 00:06:26.067
You annotate it itself with
TypeQualifierDefault, define this code for

101
00:06:26.067 --> 00:06:30.302
applicability and specify which value,
@Nullable or @NotNull,

102
00:06:30.302 --> 00:06:31.991
should be used by default.

103
00:06:31.991 --> 00:06:36.863
For instance, you can apply the declared
@MyNonullByDefault annotation to

104
00:06:36.863 --> 00:06:37.609
a package.

105
00:06:37.609 --> 00:06:42.582
But then all the types in this package
would be considered as annotated by

106
00:06:42.582 --> 00:06:46.098
your default choice,
not null, in this example.

107
00:06:46.098 --> 00:06:51.040
Note that the Kotlin compiler
interprets such problems as warnings.

108
00:06:51.040 --> 00:06:55.810
To explicitly make such warnings errors,
you add the compiler option.

109
00:06:55.810 --> 00:07:00.265
Afterward, you get an error if the code
doesn't compile because of nullable and

110
00:07:00.265 --> 00:07:03.990
non-nullable types, which are inferred
using the specified default.

111
00:07:05.990 --> 00:07:08.520
That was all about the first option.

112
00:07:08.520 --> 00:07:12.610
You can annotate your Java types and
you can specify the default annotation to

113
00:07:12.610 --> 00:07:15.350
reduce the number of annotations
added to your Java code.

114
00:07:16.398 --> 00:07:21.287
Read the Kotlin documentation to find
more details about JSR-305 support.

115
00:07:21.287 --> 00:07:25.315
However, annotating Java
code isn't always possible.

116
00:07:25.315 --> 00:07:29.561
With these Java code can be an external
library the party application that you

117
00:07:29.561 --> 00:07:33.217
don't want to touch or you don't
want to annotate the Java code for

118
00:07:33.217 --> 00:07:34.412
some other reasons.

119
00:07:34.412 --> 00:07:39.325
There is still good advice on what can
be done to minimize nullability issues

120
00:07:39.325 --> 00:07:43.333
when you write the code in Kotlin,
which calls Java methods.

121
00:07:45.111 --> 00:07:47.986
The following example
should be rather trivial.

122
00:07:47.986 --> 00:07:51.728
What happens if you add an explicit
nullable type annotation for

123
00:07:51.728 --> 00:07:53.120
our previous example?

124
00:07:54.340 --> 00:07:56.240
The answer is straightforward.

125
00:07:56.240 --> 00:07:58.190
We annotate the type as nullable,

126
00:07:58.190 --> 00:08:02.260
which forces us to check the value
explicitly for being non-null.

127
00:08:02.260 --> 00:08:03.850
Null is printed as a result.

128
00:08:05.570 --> 00:08:08.180
The other case is more interesting.

129
00:08:08.180 --> 00:08:12.841
What happens if you make the explicit
variable type not nullable, but

130
00:08:12.841 --> 00:08:14.112
a regular String?

131
00:08:14.112 --> 00:08:16.701
The same options again.

132
00:08:16.701 --> 00:08:18.728
Now the last option is correct.

133
00:08:18.728 --> 00:08:21.931
You could have guessed that
because all others were

134
00:08:21.931 --> 00:08:25.367
already present
a IllegalStateException is thrown.

135
00:08:25.367 --> 00:08:29.180
Let's look deeper at what's going on here.

136
00:08:29.180 --> 00:08:33.320
If you specify the non-null type
of a variable explicitly and

137
00:08:33.320 --> 00:08:37.140
assign to this variable
something that comes from Java,

138
00:08:37.140 --> 00:08:42.395
formally an expression of a platform type,
then Kotlin generates additional

139
00:08:42.395 --> 00:08:47.514
checks that will throw an exception if
this expression turns out to be null.

140
00:08:47.514 --> 00:08:51.628
That is much better than getting
NullPointerException sometime later

141
00:08:51.628 --> 00:08:55.510
because you know the source
of the problem right away.

142
00:08:55.510 --> 00:08:59.190
You get the detailed
message of what was null.

143
00:08:59.190 --> 00:09:03.270
It's much better than trying to
guess which reference caused NPE and

144
00:09:03.270 --> 00:09:05.050
why like in Java.

145
00:09:05.050 --> 00:09:07.960
If you don't add explicit
types specification,

146
00:09:07.960 --> 00:09:09.940
you have the same problems as in Java.

147
00:09:11.600 --> 00:09:16.660
Let's closely look at what happens in the
bytecode when you define a variable and

148
00:09:16.660 --> 00:09:18.770
assign something that
comes from Java to you.

149
00:09:20.410 --> 00:09:23.720
Kotlin compiler generates
a special additional check

150
00:09:23.720 --> 00:09:26.560
that ensures that your right
expression is not null.

151
00:09:27.930 --> 00:09:31.714
You can assign a value of a platform
type to a non-nullable type.

152
00:09:31.714 --> 00:09:34.785
But if the actual value
turns out to be null,

153
00:09:34.785 --> 00:09:38.192
then the exception will
be thrown at wrong time.

154
00:09:39.985 --> 00:09:46.118
The similar check is generated for your
public APIs that can be called from Java.

155
00:09:46.118 --> 00:09:49.905
The Kotlin compiler tries to
check that what counts and

156
00:09:49.905 --> 00:09:52.387
supposed to be not null is not null.

157
00:09:52.387 --> 00:09:57.390
So no one could pass null while
using the Kotlin function from Java.

158
00:09:57.390 --> 00:10:02.862
These intrinsic checks allow you to catch
all the possible null problems earlier and

159
00:10:02.862 --> 00:10:05.184
with the detailed error messages.

160
00:10:05.184 --> 00:10:09.149
If you want, you can switch off
generating these intrinsic checks, but

161
00:10:09.149 --> 00:10:10.515
they are really useful.

162
00:10:10.515 --> 00:10:14.952
But if it's critical for you, for
example, for performance reasons or

163
00:10:14.952 --> 00:10:18.953
you don't use any Java libraries and
don't mix Kotlin and Java,

164
00:10:18.953 --> 00:10:22.610
it's possible to switch it off
using the compiler option.

165
00:10:22.610 --> 00:10:26.623
Now we've discussed both options
of what you can do to prevent

166
00:10:26.623 --> 00:10:30.961
NullPointerExceptions if you mix
Kotlin and Java in one project.

167
00:10:30.961 --> 00:10:35.386
When you mix Kotlin and Java code
to prevent NPEs you can either add

168
00:10:35.386 --> 00:10:38.542
nullability annotations
to your Java types.

169
00:10:38.542 --> 00:10:41.553
Or add explicit types
specifications to the Kotlin

170
00:10:41.553 --> 00:10:43.730
codes that uses regular Java types.

171
00:10:43.730 --> 00:10:48.206
I would say that Kotlin null
platform types represent a good

172
00:10:48.206 --> 00:10:51.708
compromise between safety and convenience.

173
00:10:51.708 --> 00:10:52.683
On the one hand,

174
00:10:52.683 --> 00:10:56.460
you have [INAUDIBLE] guarantees
when you write pure Kotlin code.

175
00:10:56.460 --> 00:11:01.329
On the other hand, you lose these
guarantees when you use Java libraries.

176
00:11:01.329 --> 00:11:06.032
However, that still works well for
the majority of practical use cases.

177
00:11:06.032 --> 00:11:10.512
Next, we'll discuss how Kotlin List and
Kotlin Mutable List correspond to

178
00:11:10.512 --> 00:11:14.299
Java ToDo List and what kinds of
compromise we can achieve that.